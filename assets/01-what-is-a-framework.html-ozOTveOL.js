import{_ as e,c as s,b as r,o as n}from"./app-Dj0GhjYn.js";const h={};function p(i,a){return n(),s("div",null,a[0]||(a[0]=[r('<h1 id="_1-フレームワークとは" tabindex="-1"><a class="header-anchor" href="#_1-フレームワークとは"><span><strong>1.フレームワークとは？</strong></span></a></h1><p>フレームワークとは、Webアプリやソフトウェアを開発するための設計構造や再利用可能な機能をまとめたものです。<br> フレームワークは、開発者がゼロからすべてを実装しなくてもいいように、よくある基本的な機能や構造を提供します。</p><h2 id="フレームワークとライブラリの違い" tabindex="-1"><a class="header-anchor" href="#フレームワークとライブラリの違い"><span><strong>フレームワークとライブラリの違い</strong></span></a></h2><p>フレームワークとライブラリの違いは以下の通りです。</p><ul><li>フレームワーク：アプリによくある機能をまとめた枠組み</li><li>ライブラリ：開発でよく使われるコードや機能をすぐに使えるようにしたもの</li></ul><p>フレームワークは名前の通り枠組みのことです。<br> 例えば、Webアプリのフレームワークでは、実装しなくても最低限の機能を備えたアプリを動かすことができます。</p><p>一方、ライブラリとは、開発する上でよくあるソースコードや機能をすぐに使えるようにしたものです。 例えば、ユーザが入力した値が有効なメールアドレス形式であるかを判定する場合、<br> ライブラリを使用することですぐに実装することができます。</p><h2 id="フレームワークを使うメリット" tabindex="-1"><a class="header-anchor" href="#フレームワークを使うメリット"><span><strong>フレームワークを使うメリット</strong></span></a></h2><p>フレームワークを使うメリットは以下の通りです。</p><ul><li>開発の効率化</li><li>一貫性のある設計</li><li>保守性の向上</li><li>ユースケースなどの情報が豊富(人気がある場合)</li></ul><h3 id="開発の効率化" tabindex="-1"><a class="header-anchor" href="#開発の効率化"><span>開発の効率化</span></a></h3><p>フレームワークは開発に必要な機能がすでに用意されているため、フレームワークの用意した機能を組み合わせるだけで開発することができます。<br> そのため、一から実装して開発する場合と比較して短い時間で開発を行うことができます。</p><h3 id="一貫性のある設計" tabindex="-1"><a class="header-anchor" href="#一貫性のある設計"><span>一貫性のある設計</span></a></h3><p>フレームワークがアーキテクチャやコーディングスタイルを規定するため、プロジェクト全体で一貫性のある設計を行うことができます。<br> 一貫性のある設計は、共通的に各機能を実装しやすくなり、開発の効率化や不具合やエラーを削減できます。</p><h3 id="保守性の向上" tabindex="-1"><a class="header-anchor" href="#保守性の向上"><span>保守性の向上</span></a></h3><p>先述の通り、フレームワークが提供している機能や構造を活用して開発を行います。<br> ゼロからの開発と比較してコード量が削減できたり統一感のあるコーディングができるため、保守性が向上できます。</p><h3 id="ユースケースなどの情報が豊富" tabindex="-1"><a class="header-anchor" href="#ユースケースなどの情報が豊富"><span>ユースケースなどの情報が豊富</span></a></h3><p>人気のあるフレームワークでは多くの開発者がユースケースや解説、あるいはエラーなどの情報を発信しています。<br> そのため、ネット検索や書籍などで自分が知りたい情報を集めやすい傾向にあります。</p><h2 id="フレームワークを使うデメリット" tabindex="-1"><a class="header-anchor" href="#フレームワークを使うデメリット"><span><strong>フレームワークを使うデメリット</strong></span></a></h2><p>フレームワークを使うデメリットは以下の通りです。</p><ul><li>学習コスト</li><li>自由度の低下</li><li>依存性リスク</li><li>過剰な機能</li></ul><h3 id="学習コスト" tabindex="-1"><a class="header-anchor" href="#学習コスト"><span>学習コスト</span></a></h3><p>フレームワークを使用する場合、使い方やアーキテクチャなどを理解するための学習時間が必要になります。<br> また、初心者の場合はプログラミング言語の理解を深める必要もあるため、開発を行うためにより多くの学習時間がかかります。</p><h3 id="自由度の低下" tabindex="-1"><a class="header-anchor" href="#自由度の低下"><span>自由度の低下</span></a></h3><p>フレームワークの規約や作法に従う必要があるため、独自の機能を実装することが困難な場合があります。</p><h3 id="依存性リスク" tabindex="-1"><a class="header-anchor" href="#依存性リスク"><span>依存性リスク</span></a></h3><p>フレームワークのバージョンアップやサポート終了がプロジェクトに影響を与えることがあります。</p><h3 id="過剰な機能" tabindex="-1"><a class="header-anchor" href="#過剰な機能"><span>過剰な機能</span></a></h3><p>プロジェクトに不要な機能を多く提供しているフレームワークを使用した場合、リソースの無駄が発生したり、複雑化を招くことがあります。</p><h2 id="まとめ" tabindex="-1"><a class="header-anchor" href="#まとめ"><span><strong>まとめ</strong></span></a></h2><p>フレームワークはアプリ開発などを効率的かつ一貫性のある設計を促すツールです。<br> 他方、規約などにより自由度が低下したり、学習コストがかかる点などの課題もあります。 プロジェクトの規模や要件に応じて、どのフレームワークを採用するか検討することが重要になります。</p>',31)]))}const t=e(h,[["render",p]]),l=JSON.parse('{"path":"/lesson/01-what-is-a-framework.html","title":"1.フレームワークとは？","lang":"ja","frontmatter":{},"git":{"updatedTime":1746422067000,"contributors":[{"name":"co191194","username":"co191194","email":"co191194@outlook.com","commits":1,"url":"https://github.com/co191194"}],"changelog":[{"hash":"bb0e031372e06533a37c65e809fd47e4ae4e6205","time":1746422067000,"email":"co191194@outlook.com","author":"co191194","message":"ロゴの修正とページ追加"}]},"filePathRelative":"lesson/01-what-is-a-framework.md"}');export{t as comp,l as data};
