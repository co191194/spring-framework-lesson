import{_ as a,c as s,b as i,o as n}from"./app-DMu5yB7m.js";const r={};function o(t,l){return n(),s("div",null,l[0]||(l[0]=[i('<h1 id="_2-webアプリケーションとは" tabindex="-1"><a class="header-anchor" href="#_2-webアプリケーションとは"><span><strong>2.Webアプリケーションとは？</strong></span></a></h1><p>Webアプリケーションとは、インターネットを通じて利用できるソフトウェアの一種です。<br> 主にウェブブラウザ(Google ChromeやMicrosoft Edgeなど)をクライアントとして動作します。</p><h2 id="主な特徴" tabindex="-1"><a class="header-anchor" href="#主な特徴"><span><strong>主な特徴</strong></span></a></h2><ol><li>クライアント・サーバーモデル <ul><li>クライアントはウェブブラウザを使用し、サーバーはクライアントからのリクエストに応じてデータや機能を提供します。</li></ul></li><li>プラットフォームに非依存 <ul><li>ウェブブラウザが動作する環境であれば、どのようなOS・デバイスでも利用が可能です。</li></ul></li><li>インストールが不要 <ul><li>ウェブブラウザとインターネット環境があれば動作するため、ユーザーはアプリをインストールする必要がありません。</li></ul></li><li>ユーザによる更新が不要 <ul><li>アプリの更新はサーバー側で行うため、ユーザーが手動で更新する必要がありません。</li></ul></li></ol><h2 id="主な構成" tabindex="-1"><a class="header-anchor" href="#主な構成"><span><strong>主な構成</strong></span></a></h2><p>Webアプリケーションは主に以下の3層構造で構成されます。</p><ol><li>プレゼンテーション層(フロントエンド) <ul><li>ユーザが操作する部分でウェブブラウザ上で動作します。</li></ul></li><li>アプリケーション層(バックエンド) <ul><li>フロントエンドからのリクエストに応じてビジネスロジックを実行し、その結果をフロントエンドに送信します。</li><li>ビジネスロジックではデータベースの操作も行います。</li></ul></li><li>データ層(データベース) <ul><li>アプリケーションで利用するデータの保存・管理を行います。</li></ul></li></ol><div class="hint-container tip"><p class="hint-container-title">ヒント</p><ul><li>ビジネスロジックとは、システム固有の処理やデータ処理のことです。</li></ul></div><h2 id="レンダリングについて" tabindex="-1"><a class="header-anchor" href="#レンダリングについて"><span><strong>レンダリングについて</strong></span></a></h2><p>WebアプリケーションはHTMLファイルをインターネットに配信することによりウェブブラウザ上で画面表示を行うことができます。<br> WebアプリケーションではHTMLファイルの配信について下記の方式を採用することが多いです。</p><ul><li>クライアントサイドレンダリング(CSR)</li><li>サーバーサイドレンダリング(SSR)</li><li>静的サイト生成(SSG)</li><li>インクリメンタル静的生成(ISR)</li></ul><p>なお、ページの特性に応じて上記のレンダリング方式を組み合わせるハイブリッド方式を採用する場合もあります。</p><h3 id="クライアントサイドレンダリング-csr" tabindex="-1"><a class="header-anchor" href="#クライアントサイドレンダリング-csr"><span><strong>クライアントサイドレンダリング(CSR)</strong></span></a></h3><h4 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span><strong>概要</strong></span></a></h4><p>CSRはサーバーから土台となるHTMLファイルとJavaScriptファイルを取得し、クライアント側(主にウェブブラウザ)がページを構築・表示する方式です。<br> 画面描画やデータ取得はすべてブラウザ側で行います。</p><h4 id="仕組み" tabindex="-1"><a class="header-anchor" href="#仕組み"><span><strong>仕組み</strong></span></a></h4><ol><li>初回アクセス時に一つのHTMLファイルと関連するJavaScriptファイルをサーバが配信する。</li><li>ユーザーの操作に応じて、ウェブブラウザ上でJavaScriptを実行し、必要なデータをWebAPI経由で取得したりHTMLを書き換えたりして画面を描画する。</li></ol><h4 id="メリット" tabindex="-1"><a class="header-anchor" href="#メリット"><span><strong>メリット</strong></span></a></h4><ul><li><strong>動的なUI</strong><ul><li>ユーザー操作に応じて画面を動的に更新できるため、アニメーションなどの動きのある描画が可能です。</li></ul></li><li><strong>サーバー負荷の軽減</strong><ul><li>画面描画はクライアント側で処理するため、サーバーリソースの消費が少なくなります。</li></ul></li><li><strong>スムーズなページ遷移</strong><ul><li>ページ全体を再ロードせずに部分的に更新が可能です。</li></ul></li></ul><h4 id="デメリット" tabindex="-1"><a class="header-anchor" href="#デメリット"><span><strong>デメリット</strong></span></a></h4><ul><li><strong>SEOが難しい</strong><ul><li>土台となるHTMLファイルにはコンテンツがないため、検索エンジンがコンテンツを正しくインデックスできない場合があります。</li></ul></li><li><strong>初回レンダリングが遅くなる場合がある</strong><ul><li>必要なJavaScriptファイルのサイズが大きい場合、初回レンダリングまでに時間がかかる可能性があります。</li></ul></li><li><strong>クライアント環境に依存する</strong><ul><li>描画速度などはユーザーが使用するデバイスの性能やネットワーク環境、ブラウザの動作などに依存します。</li></ul></li></ul><h3 id="サーバーサイドレンダリング-ssr" tabindex="-1"><a class="header-anchor" href="#サーバーサイドレンダリング-ssr"><span><strong>サーバーサイドレンダリング(SSR)</strong></span></a></h3><h4 id="概要-1" tabindex="-1"><a class="header-anchor" href="#概要-1"><span><strong>概要</strong></span></a></h4><p>SSRはユーザーの操作に応じてサーバーでHTMLファイルを生成してクライアントに送信する方式です。</p><h4 id="仕組み-1" tabindex="-1"><a class="header-anchor" href="#仕組み-1"><span><strong>仕組み</strong></span></a></h4><ol><li>ブラウザーがサーバーにリクエストを送信する。</li><li>サーバーがリクエスト内容の応じてHTMLを動的に生成し、ブラウザにレスポンスとして送信する。</li><li>ブラウザがHTMLをレンダリングしてページを表示する。</li></ol><h4 id="メリット-1" tabindex="-1"><a class="header-anchor" href="#メリット-1"><span><strong>メリット</strong></span></a></h4><ul><li><strong>SEOに強い</strong><ul><li>サーバーで完全なHTMLを生成するため、検索エンジンのクローラーがコンテンツをインデックスかできます。</li></ul></li><li><strong>初期表示が速い</strong><ul><li>クライアントは完全なHTMLを受け取るため、画面がすぐに表示されます。</li></ul></li><li><strong>クライアント環境に依存しない</strong><ul><li>描画も含めてサーバーで処理を行うため、クライアント環境に依存しません。</li></ul></li></ul><h4 id="デメリット-1" tabindex="-1"><a class="header-anchor" href="#デメリット-1"><span><strong>デメリット</strong></span></a></h4><ul><li><strong>サーバー負荷が高い</strong><ul><li>各リクエストごとにHTMLを生成するため、CSRと比較するとサーバー負荷が高くなる傾向にあります。</li></ul></li><li><strong>ページ遷移が遅い</strong><ul><li>ページ遷移ごとにサーバーへのリクエストが発生しサーバーが動的にHTMLを生成するため、ページ遷移に時間がかかります。</li></ul></li></ul><h3 id="静的サイト生成-ssg" tabindex="-1"><a class="header-anchor" href="#静的サイト生成-ssg"><span><strong>静的サイト生成(SSG)</strong></span></a></h3><h4 id="概要-2" tabindex="-1"><a class="header-anchor" href="#概要-2"><span><strong>概要</strong></span></a></h4><p>各ページを事前に生成し静的ファイルとして保存し、クライアントからのリクエスト時に配信する方式です。</p><h4 id="仕組み-2" tabindex="-1"><a class="header-anchor" href="#仕組み-2"><span><strong>仕組み</strong></span></a></h4><ol><li>デプロイ時にHTMLファイルを生成する。</li><li>サーバーがリクエストに応じてHTMLを送信します。</li></ol><h4 id="メリット-2" tabindex="-1"><a class="header-anchor" href="#メリット-2"><span><strong>メリット</strong></span></a></h4><ul><li><strong>高速な配信</strong><ul><li>静的HTMLを配信するため、サーバーのレスポンスが非常に早くなります。</li></ul></li><li><strong>SEOに強い</strong><ul><li>完全なHTMLが事前に生成されているため、検索エンジンがコンテンツをインデックス化しやすい。</li></ul></li><li><strong>サーバー負荷が少ない</strong><ul><li>静的ファイルの配信のみであるため、サーバーリソースをほとんど消費しません。</li></ul></li></ul><h4 id="デメリット-2" tabindex="-1"><a class="header-anchor" href="#デメリット-2"><span><strong>デメリット</strong></span></a></h4><ul><li><strong>動的データには不向き</strong><ul><li>事前に生成したHTMLを配信するため、ユーザーごとに異なるコンテンツを表示することには不向きです。</li></ul></li><li><strong>デプロイ時間が増加</strong><ul><li>静的ファイルを生成する必要があるため、ページ数が増えると生成に時間がかかり、デプロイ時間が増加します。</li></ul></li></ul><h3 id="インクリメンタル静的生成-isr" tabindex="-1"><a class="header-anchor" href="#インクリメンタル静的生成-isr"><span><strong>インクリメンタル静的生成(ISR)</strong></span></a></h3><h4 id="概要-3" tabindex="-1"><a class="header-anchor" href="#概要-3"><span><strong>概要</strong></span></a></h4><p>SSRとSSGと仕組みを組み合わせた方式です。<br> 一部のページを事前に生成し、必要な場合のみ動的に再生成します。</p><h4 id="仕組み-3" tabindex="-1"><a class="header-anchor" href="#仕組み-3"><span><strong>仕組み</strong></span></a></h4><ol><li>デプロイ時にHTMLファイルを生成する。</li><li>初回アクセスでサーバーが静的HTMLを配信する。</li><li>リクエストごとにサーバーは期限切れのHTMLを再生成し差し替える。</li></ol><h4 id="メリット-3" tabindex="-1"><a class="header-anchor" href="#メリット-3"><span><strong>メリット</strong></span></a></h4><ul><li><strong>静的な速度と動的な柔軟性</strong><ul><li>静的サイトの速度を維持しつつ、動的データに対応できます。</li></ul></li><li><strong>SEOに強い</strong><ul><li>完全なHTMLが事前に生成されているため、検索エンジンがコンテンツをインデックス化しやすい。</li></ul></li></ul><h4 id="デメリット-3" tabindex="-1"><a class="header-anchor" href="#デメリット-3"><span><strong>デメリット</strong></span></a></h4><ul><li><strong>複雑な設定</strong><ul><li>静的な部分と動的な部分が存在するため、SSRやSSGと比較して設定が複雑になります。</li></ul></li></ul><h2 id="mpaとspa" tabindex="-1"><a class="header-anchor" href="#mpaとspa"><span><strong>MPAとSPA</strong></span></a></h2><p>Webアプリケーション開発における構築方法は大きく分けてMPAとSPAの二種類あります。</p><h3 id="mpa-マルチページアプリケーション" tabindex="-1"><a class="header-anchor" href="#mpa-マルチページアプリケーション"><span><strong>MPA(マルチページアプリケーション)</strong></span></a></h3><h4 id="概要-4" tabindex="-1"><a class="header-anchor" href="#概要-4"><span><strong>概要</strong></span></a></h4><p>MPAは従来型のWebアプリケーションで、各ページが独立したHTMLファイルとする構築方法です。 主にSSRやSSG、ISRで採用されます。</p><h4 id="メリット-4" tabindex="-1"><a class="header-anchor" href="#メリット-4"><span><strong>メリット</strong></span></a></h4><ul><li><strong>シンプルな構造</strong><ul><li>ページごとに独立しているため、開発が容易な傾向にあります。</li></ul></li><li><strong>SEOに強い</strong><ul><li>各ページが独立している、検索エンジンに最適化されやすい傾向にあります。</li></ul></li><li><strong>初期表示が速い</strong><ul><li>必要なHTMLファイルやJavaScriptファイルのみを取得するため、初期表示が早くなります。</li></ul></li></ul><h4 id="デメリット-4" tabindex="-1"><a class="header-anchor" href="#デメリット-4"><span><strong>デメリット</strong></span></a></h4><ul><li><strong>遷移ごとにページを再ロード</strong><ul><li>ページ遷移のたびにサーバーと通信し、新しいHTMLを取得するため、ページ遷移が遅い傾向にあります。</li></ul></li><li><strong>複雑な状態管理</strong><ul><li>ページ間でのデータや状態を共有するのが困難です。</li></ul></li><li><strong>通信量が多い</strong><ul><li>ページ遷移ごとにHTML全体を取得するため、通信量が多くなる傾向にあります。</li></ul></li></ul><h3 id="spa-シングルページアプリケーション" tabindex="-1"><a class="header-anchor" href="#spa-シングルページアプリケーション"><span><strong>SPA(シングルページアプリケーション)</strong></span></a></h3><h4 id="概要-5" tabindex="-1"><a class="header-anchor" href="#概要-5"><span><strong>概要</strong></span></a></h4><p>SPAでは、一つのHTMLファイルをベースにJavaScriptを使って動的にページを更新する構築方法です。 主にCSRで採用されます。</p><h4 id="メリット-5" tabindex="-1"><a class="header-anchor" href="#メリット-5"><span><strong>メリット</strong></span></a></h4><ul><li><strong>高速なユーザー体験</strong><ul><li>ページ遷移時にサーバーからHTMLを再取得せず、必要なデータのみ取得するため、高速な応答速度を実現できます。</li></ul></li><li><strong>リッチなインタラクション</strong><ul><li>画面描画をJavaScriptで行うため、動的なコンテンツや高度なUIが実現できます。</li></ul></li><li><strong>効率的なデータ通信</strong><ul><li>必要なデータのみをWebAPI経由で取得するため、通信量を削減できます。</li></ul></li></ul><h4 id="デメリット-5" tabindex="-1"><a class="header-anchor" href="#デメリット-5"><span><strong>デメリット</strong></span></a></h4><ul><li><strong>SEOが難しい</strong><ul><li>基本的には不完全なHTMLを配信するため、検索エンジンがコンテンツを正しくインデックス化できないことがあります。(ただし、プリレンダリングやSSRと組み合わせることで解消することが可能です。)</li></ul></li><li><strong>初回ロードが遅い</strong><ul><li>初回に多くのJavaScriptを取得するため、初期表示に時間がかかる傾向にあります。</li></ul></li><li><strong>クライアント側の負荷が増加</strong><ul><li>アプリ全体の描画がクライアント側で動作するため、クライアント側のリソース消費が増加します。</li></ul></li></ul>',64)]))}const h=a(r,[["render",o]]),g=JSON.parse('{"path":"/lesson/02-what-is-a-web-app.html","title":"2.Webアプリケーションとは？","lang":"ja","frontmatter":{},"git":{"updatedTime":1746518693000,"contributors":[{"name":"co191194","username":"co191194","email":"co191194@outlook.com","commits":2,"url":"https://github.com/co191194"}],"changelog":[{"hash":"23009397b5f652c79bc43fcabada229ed963c2e3","time":1746518693000,"email":"co191194@outlook.com","author":"co191194","message":"Webアプリについてのページを作成"},{"hash":"bb0e031372e06533a37c65e809fd47e4ae4e6205","time":1746422067000,"email":"co191194@outlook.com","author":"co191194","message":"ロゴの修正とページ追加"}]},"filePathRelative":"lesson/02-what-is-a-web-app.md"}');export{h as comp,g as data};
