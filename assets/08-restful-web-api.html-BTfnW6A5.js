import{_ as i,c as a,b as n,o as l}from"./app-Dj0GhjYn.js";const e={};function t(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_8-restful-web-api" tabindex="-1"><a class="header-anchor" href="#_8-restful-web-api"><span><strong>8.RESTful Web API</strong></span></a></h1><h2 id="web-apiとは" tabindex="-1"><a class="header-anchor" href="#web-apiとは"><span><strong>Web APIとは</strong></span></a></h2><p>WebAPIとは、「Web Application Programming Interface」の略で、 <strong>インターネットを通じて他のアプリケーションやサービスとデータをやりとりしたり 機能を利用するための仕組み</strong>です。 WebAPIでは<strong>HTTP通信</strong>を行うことで他のアプリケーションやサービスと通信を行います。</p><h2 id="利用シーン" tabindex="-1"><a class="header-anchor" href="#利用シーン"><span><strong>利用シーン</strong></span></a></h2><ul><li>スマホアプリやフロントエンド(ReactやVueなど)からデータを取得・登録したいとき。</li><li>他のサービス(天気予報やSNS、地図など)と連携したいとき。</li><li>マイクロサービス同士でやりとりするとき。</li></ul><div class="hint-container tip"><p class="hint-container-title">ヒント</p><p><strong>マイクロサービス</strong>とは、ソフトウェア開発の手法およびアーキテクチャの一種で、 一つのアプリケーションを複数の独立した小規模のコンポーネントに分割して構築する手法です。</p></div><h2 id="webapiの代表的な仕組み" tabindex="-1"><a class="header-anchor" href="#webapiの代表的な仕組み"><span><strong>WebAPIの代表的な仕組み</strong></span></a></h2><ul><li>URIごとに機能を分割(<code>/users</code>でユーザ一覧取得、<code>/orders</code>で注文情報取得など)</li><li>HTTPメソッドで操作を分割(<code>GET</code>で取得、<code>POST</code>で登録、<code>PUT</code>で更新、<code>DELETE</code>で削除など)</li><li>リクエストとレスポンスはJSON形式が主流</li><li>認証や認可が必要な場合も多い(トークンやAPIキーなど)</li></ul><div class="hint-container tip"><p class="hint-container-title">ヒント</p><p><strong>JSON形式</strong>とは、「JavaScript Object Notation」の略で、 データを表現するための軽量なテキストベースのフォーマットのことです。 JavaScriptのオブジェクト構造を基としていますが、 様々なプログラミング言語で利用され、特にWebアプリでサーバとクライアント間の データ交換に広く採用されています。</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="sample.json"><span>sample.json</span></div><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;田中太郎&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;isStudent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><h2 id="restful-api" tabindex="-1"><a class="header-anchor" href="#restful-api"><span><strong>RESTful API</strong></span></a></h2><p><strong>RESTful API</strong>とは「REST(Representational State Transfer)」という設計原則に準拠して作成されたWebAPIのことです。</p><p><strong>REST</strong>はWebの設計思想のひとつで、Webの持つ本来の仕組み（HTTPのGET, POST, PUT, DELETEなどのメソッドやURI、ステータスコードなど）を活用して、 シンプルで拡張性・可用性の高い分散システムを設計するための指針です。</p><h2 id="restful-apiの特徴" tabindex="-1"><a class="header-anchor" href="#restful-apiの特徴"><span><strong>RESTful APIの特徴</strong></span></a></h2><ol><li>リソース指向 <ul><li>たとえば、「ユーザ情報」は<code>/users</code>、「注文」は<code>/orders</code>のように「名詞」で表現するURIを設計します。</li></ul></li><li>HTTPメソッドの意味を活用 <ul><li><code>GET /users</code> ... ユーザ一覧の取得</li><li><code>POST /users</code> ... 新規ユーザの登録</li><li><code>GET /users/1</code> ... ID=1のユーザ情報の取得</li><li><code>PUT /users/1</code> ... ID=1のユーザ情報の更新</li><li><code>DELETE /users/1</code>... ID=1のユーザ情報の削除</li></ul></li><li>ステートレス <ul><li>各リクエストは独立し、サーバはリクエストごとの情報のみで処理を行います。</li></ul></li><li>一貫したレスポンス形式 <ul><li>多くの場合、JSONやXMLでデータを返します。</li></ul></li></ol><h2 id="springでの実装例" tabindex="-1"><a class="header-anchor" href="#springでの実装例"><span><strong>Springでの実装例</strong></span></a></h2><p>SpringではWebAPIを作るためのコンポーネントを提供しています。(Spring MVCやSpring Boot)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // GET /users</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // POST /users</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // GET /users/{id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // PUT /users/{id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PutMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // DELETE /users/{id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DeleteMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deleteUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@RestController</code>: WebAPI用コントローラー向けのステレオタイプアノテーション</li><li><code>@RequestBody</code>: JSONリクエストをJavaオブジェクトに変換するアノテーション</li><li><code>@PathVariable</code>: URIに含まれるパスパラメータをJavaで扱えるように変換するアノテーション</li></ul><h2 id="まとめ" tabindex="-1"><a class="header-anchor" href="#まとめ"><span><strong>まとめ</strong></span></a></h2><ul><li>WebAPIは外部とデータや機能をやりとりするための&quot;窓口&quot;のこと。</li><li>RESTful APIは「リソースをURIで表し、HTTPメソッドで操作」するWebAPIのこと。</li><li>Spring MVCやSpring Bootを利用することで簡単にWebAPIを作ることができる。</li></ul>`,20)]))}const k=i(e,[["render",t]]),r=JSON.parse('{"path":"/lesson/08-restful-web-api.html","title":"8.RESTful Web API","lang":"ja","frontmatter":{},"git":{"updatedTime":1751985062000,"contributors":[{"name":"co191194","username":"co191194","email":"co191194@outlook.com","commits":1,"url":"https://github.com/co191194"}],"changelog":[{"hash":"fb2c2c81dd239b952756ef65401a82af432e548b","time":1751985062000,"email":"co191194@outlook.com","author":"co191194","message":"ページの追加ほか"}]},"filePathRelative":"lesson/08-restful-web-api.md"}');export{k as comp,r as data};
