import{_ as s,c as a,b as e,o as l}from"./app-Dj0GhjYn.js";const t={};function n(h,i){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="_4-ビルドツール" tabindex="-1"><a class="header-anchor" href="#_4-ビルドツール"><span><strong>4. ビルドツール</strong></span></a></h1><p>ビルドツールとは、<strong>ソースコードのコンパイル、テスト、パッケージ化、依存関係の管理</strong>などを自動化するためのツールです。 手動で行うと手間がかかる作業を簡単にしてくれます。</p><h2 id="ビルドツールで自動化できる主な作業" tabindex="-1"><a class="header-anchor" href="#ビルドツールで自動化できる主な作業"><span><strong>ビルドツールで自動化できる主な作業</strong></span></a></h2><p>Javaのビルドツールでは以下のようなことが自動化できます。</p><ol><li>ソースコードのコンパイル <ul><li>Javaファイル(.java)をコンパイルして、クラスファイル(.class)を自動生成します。</li></ul></li><li>依存ライブラリのダウンロード・管理 <ul><li>必要な外部ライブラリ(例:Log4j, JUnitなど)を自動で探してダウンロードし、プロジェクトに組み込みます。</li></ul></li><li>テストの自動実行 <ul><li>テストコード(例:JUnitテスト)を自動的に実行し、結果をレポートして出力します。</li></ul></li><li>パッケージ化 <ul><li>完成したプログラムをJARファイルやWARファイルにまとめます。配布やサーバのデプロイが簡単になります。</li></ul></li><li>クリーン処理 <ul><li>古いクラスファイルや生成物を自動で削除して、きれいな状態からビルドしなおすことができます。</li></ul></li><li>コードの整形や静的解析 <ul><li>コードフォーマッターやLintツール、静的解析ツール(例:Checkstyle, PMD)を組み込んで自動実行できます。</li></ul></li><li>ドキュメント生成 <ul><li>Javadocを使って、ソースコードから自動的にAPIドキュメントを生成します。</li></ul></li><li>デプロイ作業 <ul><li>サーバへの自動デプロイや配布用リポジトリへのアップロードも自動化できます。</li></ul></li></ol><h3 id="ソースコードのコンパイルでのサンプル" tabindex="-1"><a class="header-anchor" href="#ソースコードのコンパイルでのサンプル"><span><strong>ソースコードのコンパイルでのサンプル</strong></span></a></h3><h4 id="ビルドツールを使わない場合" tabindex="-1"><a class="header-anchor" href="#ビルドツールを使わない場合"><span><strong>ビルドツールを使わない場合</strong></span></a></h4><p>ビルドツールを使わない場合は以下のような手順となります。</p><ol><li>コンパイルコマンドを実行する。</li><li>クラスパス(外部ライブラリなど)を自分で設定する必要がある</li><li>複数のファイルがある場合、全部指定するかワイルドカードを使う</li></ol><p>例えば、<code>Hello.java</code>というファイルをコンパイルする場合</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello.java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>外部ライブラリ(例:<code>lib/some-library.jar</code>)が必要な場合</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib/some-library.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello.java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>複数のファイルがある場合</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib/some-library.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="ビルドツールを使う場合-mavenの場合" tabindex="-1"><a class="header-anchor" href="#ビルドツールを使う場合-mavenの場合"><span><strong>ビルドツールを使う場合(Mavenの場合)</strong></span></a></h4><p>Mavenを使う場合以下のような手順になります。</p><ol><li><code>pom.xml</code>に依存ライブラリやプロジェクト情報を書く</li><li>Mavenのコンパイルコマンドを実行する</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mvn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>pom.xml</code>での設定を正しく行えば、上記のコマンド1つで依存関係のダウンロード&amp;すべてのJavaファイルのコンパイルができます。</p><h4 id="ビルドツールの有無のまとめ" tabindex="-1"><a class="header-anchor" href="#ビルドツールの有無のまとめ"><span><strong>ビルドツールの有無のまとめ</strong></span></a></h4><table><thead><tr><th></th><th style="text-align:center;">ビルドツールなし</th><th style="text-align:center;">ビルドツールあり</th></tr></thead><tbody><tr><td>コマンド</td><td style="text-align:center;"><code>javac</code>で自分で指定</td><td style="text-align:center;"><code>mvn compile</code>など簡単</td></tr><tr><td>依存管理</td><td style="text-align:center;">手動</td><td style="text-align:center;">自動</td></tr><tr><td>複数ファイル</td><td style="text-align:center;">手作業</td><td style="text-align:center;">自動</td></tr><tr><td>再現性</td><td style="text-align:center;">人によってバラバラ</td><td style="text-align:center;">みんな同じ環境</td></tr></tbody></table><h2 id="javaにおける主なビルドツール" tabindex="-1"><a class="header-anchor" href="#javaにおける主なビルドツール"><span><strong>Javaにおける主なビルドツール</strong></span></a></h2><h3 id="maven-メイヴン" tabindex="-1"><a class="header-anchor" href="#maven-メイヴン"><span><strong>Maven(メイヴン)</strong></span></a></h3><ul><li><strong>特徴</strong>: 一番有名なビルドツール。プロジェクトの構成や依存ライブラリの管理が得意。</li><li><strong>設定ファイル</strong>: <code>pom.xml</code></li><li><strong>コマンド例</strong>:<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mvn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # コンパイル</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mvn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # テスト</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mvn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # パッケージ化(jar作成など)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>メリット</strong>: 多くのプロジェクトで使われている。依存関係の自動ダウンロードが便利。</li></ul><h3 id="gradle-グレードル" tabindex="-1"><a class="header-anchor" href="#gradle-グレードル"><span><strong>Gradle(グレードル)</strong></span></a></h3><ul><li><strong>特徴</strong>: 新しいビルドツール。シンプルで高速、カスタマイズ性が高い。</li><li><strong>設定ファイル</strong>: <code>build.gradle</code></li><li><strong>コマンド例</strong>:<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ビルド</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # テスト</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>メリット</strong>: 記述がシンプルで、複雑な処理も書きやすい。</li></ul><h3 id="ant-アント" tabindex="-1"><a class="header-anchor" href="#ant-アント"><span><strong>Ant(アント)</strong></span></a></h3><ul><li><strong>特徴</strong>: 昔からあるビルドツール。細かい制御ができるが、設定がやや複雑。</li><li><strong>設定ファイル</strong>: <code>build.xml</code></li><li><strong>コマンド例</strong>:<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ant</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # ビルド</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>メリット</strong>: 柔軟にカスタマイズできる。</li></ul><h2 id="どれを使えばよいのか" tabindex="-1"><a class="header-anchor" href="#どれを使えばよいのか"><span><strong>どれを使えばよいのか？</strong></span></a></h2><p>MavenかGradleがオススメです。</p><ul><li>Mavenは一番使われているため、情報が多くあり導入しやすい。</li><li>Gradleは新しいプロジェクト(特にAndroid開発など)ではよく採用されているため、 Mavenと同様に情報が多くあります。</li></ul>`,32)]))}const d=s(t,[["render",n]]),g=JSON.parse('{"path":"/lesson/04-what-is-the-build-tools.html","title":"4. ビルドツール","lang":"ja","frontmatter":{},"git":{"updatedTime":1748270792000,"contributors":[{"name":"co191194","username":"co191194","email":"co191194@outlook.com","commits":1,"url":"https://github.com/co191194"}],"changelog":[{"hash":"33b246cd8da5f14c130be0d847a5cc458b9a7b7c","time":1748270792000,"email":"co191194@outlook.com","author":"co191194","message":"ページ追加＋プラグイン追加"}]},"filePathRelative":"lesson/04-what-is-the-build-tools.md"}');export{d as comp,g as data};
