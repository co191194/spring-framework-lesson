import{_ as i,c as a,b as n,o as l}from"./app-Dj0GhjYn.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_7-トランザクション管理" tabindex="-1"><a class="header-anchor" href="#_7-トランザクション管理"><span><strong>7.トランザクション管理</strong></span></a></h1><h2 id="トランザクションとは" tabindex="-1"><a class="header-anchor" href="#トランザクションとは"><span><strong>トランザクションとは</strong></span></a></h2><p>トランザクションとは、データベースなどで「一覧の処理をひとつのまとまり(単位)」として扱う仕組みです。 例えば銀行の送金処理で「Aさんからお金を引き落とし、Bさんに振り込む」という２つの処理が両方とも成功する、 または両方とも失敗する、というように「全部成功か、全部失敗か」を保証するものです。</p><h3 id="トランザクションの4つの性質-acid特性" tabindex="-1"><a class="header-anchor" href="#トランザクションの4つの性質-acid特性"><span><strong>トランザクションの4つの性質(ACID特性)</strong></span></a></h3><ol><li><strong>Atomicity(原子性)</strong><br> すべての操作が完全に実行されるか、全く実行されないかのどちらか。</li><li><strong>Consistency(一貫性)</strong><br> トランザクション実行前後でデータの整合性が保たれる。</li><li><strong>Isolation(独立性/分離性)</strong> 複数のトランザクションが同時に実行されても互いに干渉しない。</li><li><strong>Durability(永続性)</strong> 完了したトランザクションの結果は失われない。</li></ol><h2 id="springのトランザクション管理とは" tabindex="-1"><a class="header-anchor" href="#springのトランザクション管理とは"><span><strong>Springのトランザクション管理とは？</strong></span></a></h2><p>Spring Frameworkは、Javaアプリケーションを作る時に「トランザクション管理」を 簡単にできる仕組みを用意しています。</p><h3 id="主な特徴" tabindex="-1"><a class="header-anchor" href="#主な特徴"><span><strong>主な特徴</strong></span></a></h3><ul><li><strong>宣言的トランザクション管理</strong><br> アノテーション(例: <code>@Transactional</code>)やXML設定で、トランザクションの開始・終了を自動化できます。</li><li><strong>プログラム的トランザクション管理</strong><br> Javaのコードで自分でトランザクションの開始や終了を制御することもできます。</li></ul><h3 id="springのトランサクション管理の利点" tabindex="-1"><a class="header-anchor" href="#springのトランサクション管理の利点"><span><strong>Springのトランサクション管理の利点</strong></span></a></h3><ul><li>複雑なトランザクション制御を簡単な記述で実現できる。</li><li>データの整合性を担保しやすい。</li><li>データベースや環境を意識せずに利用できる。</li></ul><h3 id="アノテーションでの管理-おすすめ" tabindex="-1"><a class="header-anchor" href="#アノテーションでの管理-おすすめ"><span><strong>アノテーションでの管理(おすすめ)</strong></span></a></h3><p>最も簡単なのは、<strong>アノテーションでの管理</strong>です。 クラス単位・メソッド単位で管理することも可能です。 なお、アノテーションでの管理は宣言的トランザクション管理の一種です。</p><h4 id="特徴" tabindex="-1"><a class="header-anchor" href="#特徴"><span><strong>特徴</strong></span></a></h4><ul><li><code>@Transactional</code>をメソッドやクラスにつけるだけで、その中の処理が「ひとつのトランザクション」として扱われます。</li><li>途中で例外(エラー)が発生した場合、自動的にロールバックされ、データの不整合が起きません。</li></ul><h4 id="メソッド単位での-transactional" tabindex="-1"><a class="header-anchor" href="#メソッド単位での-transactional"><span><strong>メソッド単位での@Transactional</strong></span></a></h4><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserService.java"><span>UserService.java</span></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ここからトランザクション開始</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ここまでがトランザクションの範囲</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUserEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orElseThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newEmail);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 変更はトランザクションがコミットされるときにDBに反映</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ul><li><code>@Transactional</code>をメソッドにつけると、そのメソッドの処理全体が１つのトランザクションで実行されます。</li><li>途中で例外が発生した場合、自動的にロールバックされます。</li></ul><h4 id="クラス単位での-transactional" tabindex="-1"><a class="header-anchor" href="#クラス単位での-transactional"><span><strong>クラス単位での@Transactional</strong></span></a></h4><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OrderService.java"><span>OrderService.java</span></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OrderRepository orderRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Order </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        orderRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(order);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ここもトランザクションの範囲</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancelOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">orderId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Order order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orderRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(orderId).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orElseThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CANCELLED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ul><li>クラスに<code>＠Transactional</code>をつけると、そのクラス内の<strong>すべてのパブリックメソッド</strong>がトランザクション管理されます。</li><li>ただし、privateメソッドや同じクラス内からのメソッド呼び出しには適用されないので注意してください。</li></ul><h4 id="transactionalの属性例-応用" tabindex="-1"><a class="header-anchor" href="#transactionalの属性例-応用"><span><strong>@Transactionalの属性例(応用)</strong></span></a></h4><h5 id="読み取り専用トランザクション" tabindex="-1"><a class="header-anchor" href="#読み取り専用トランザクション"><span><strong>読み取り専用トランザクション</strong></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAllUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>readOnly = true</code>を指定すると、読み取り専用の最適化が働きます(書き込みがない場合に推奨)。</li></ul><h5 id="ロールバック条件の指定" tabindex="-1"><a class="header-anchor" href="#ロールバック条件の指定"><span><strong>ロールバック条件の指定</strong></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CustomException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws CustomException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // CustomExceptionが発生した場合だけロールバック</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>rollbackFor</code>で、どの例外が発生したらロールバックするかを指定できます。</li></ul>`,28)]))}const p=i(e,[["render",h]]),k=JSON.parse('{"path":"/lesson/07-transaction-management.html","title":"7.トランザクション管理","lang":"ja","frontmatter":{},"git":{"updatedTime":1748270792000,"contributors":[{"name":"co191194","username":"co191194","email":"co191194@outlook.com","commits":1,"url":"https://github.com/co191194"}],"changelog":[{"hash":"33b246cd8da5f14c130be0d847a5cc458b9a7b7c","time":1748270792000,"email":"co191194@outlook.com","author":"co191194","message":"ページ追加＋プラグイン追加"}]},"filePathRelative":"lesson/07-transaction-management.md"}');export{p as comp,k as data};
